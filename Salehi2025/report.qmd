---
title: "Data Processing and Visualization for the Global AMR Gender Study"
format: html
editor: visual
---

# Introduction

This document contains the analysis and visualization steps for reproducing Figure 5 (Model 1), along with visualizations for the other model variants.

All required preprocessing and model fitting steps are executed via a wrapper script called `main.R`. This script sources the following R scripts in the correct order:

-   `data.R` – data preparation

-   `funcs.R` – utility functions

-   `model.R` – statistical model fitting (computationally intensive)

Before rendering this report, ensure that all these scripts are available in your working directory. To render this report and run all required scripts, make sure to execute script `main.R`.

The dataset (`tse_AMRdemo.rds`) used in this analysis, as well as all the above scripts, can be found in the [GitHub](https://github.com/microbiome/data/blob/main/Salehi2025). This separation ensures that model fitting, which is computationally intensive, does not need to be rerun every time the report is generated.

Let's load all the necessary libraries.

```{r setup, include=FALSE}
library(scater)
library(ggpubr)
library(rstatix)
library(viridis)
library(ggsignif)
library(Matrix)
library(RColorBrewer)
library(caret)
library(randomForest)
library(xgboost)
library(brms)
library(glmnet)
library(tidyverse)
library(vegan)
library(TreeSummarizedExperiment)
library(dplyr)
```

# Data processing

All preprocessing steps including filtering samples, extracting metadata, calculating resistance class abundances, and computing diversity metrics are implemented in a separate R script (`data.R`). Please ensure that this script is located in your working directory or adjust the path accordingly.

# Utility functions

All helper functions such as formatting numbers and assigning significance indicators are implemented in a separate R script (`funcs.R`). Please ensure that this script is available in your working directory.

# Modeling

This section summarizes the results from four Bayesian regression model variants. Each model was fitted separately for two outcomes ARG load and Shannon diversity and stratified by income group: HIC (High-Income Countries) and LMIC (Low- and Middle-Income Countries).

### Model Variants:

1.  **Model 1 (Reference):** Fixed effects only (no adjustment for bioproject or sequencing depth):

    $$
    y_i \sim \mathcal{D}(\mu_i), \quad \mu_i = \beta_0 + \mathbf{X}_i \boldsymbol{\beta}
    $$

2.  **Model 2:** Adds a random intercept for `bioproject` to account for study-level variability:

    $$
    y_i \sim \mathcal{D}(\mu_i), \quad \mu_i = \beta_0 + \mathbf{X}_i \boldsymbol{\beta} + b_{\text{project}[i]}
    $$

3.  **Model 3:** Includes sequencing depth as a covariate (log-transformed total read count):

    $$
    y_i \sim \mathcal{D}(\mu_i), \quad \mu_i = \beta_0 + \mathbf{X}_i \boldsymbol{\beta} + \beta_{\text{depth}} \cdot \log(\text{readcount}_i)
    $$

4.  **Model 4:** Combines both random intercept and sequencing depth:

    $$
    y_i \sim \mathcal{D}(\mu_i), \quad \mu_i = \beta_0 + \mathbf{X}_i \boldsymbol{\beta} + \beta_{\text{depth}} \cdot \log(\text{readcount}_i) + b_{\text{project}[i]}
    $$

Where:

-   $y_i$ is the outcome (either ARG load or Shannon diversity),
-   $\mathcal{D}$ is the distribution (log-normal for ARG load, Gaussian for Shannon),
-   $\mathbf{X}_i$ are the dummy-encoded covariates (e.g., gender, age group, region, antibiotic use, etc.),
-   $\boldsymbol{\beta}$: vector of fixed effect coefficients,
-   $b_{\text{project}[i]}$ is the random intercept for bioproject.

Model fitting is computationally intensive and has been performed in a separate R script (`model.R`). Please ensure that this script is available in your working directory.

The resulting model objects are saved as `.rds` files for each model (e.g., `fit1_ARG_load.rds`, `fit1_shannon_diversity.rds`, etc.). These files are then loaded into this document to allow downstream summarization and visualization without re-running the computationally intensive model fitting.

The models are then combined into respective lists (`fit_list1`, `fit_list2`, `fit_list3`, and `fit_list4`) for easier manipulation and analysis in subsequent steps.


```{r, load_models, include=FALSE}
# Load models
fit1_ARG_load <- readRDS("fit1_ARG_load.rds")
fit1_shannon_diversity <- readRDS("fit1_shannon_diversity.rds")
fit2_ARG_load <- readRDS("fit2_ARG_load.rds")
fit2_shannon_diversity <- readRDS("fit2_shannon_diversity.rds")
fit3_ARG_load <- readRDS("fit3_ARG_load.rds")
fit3_shannon_diversity <- readRDS("fit3_shannon_diversity.rds")
fit4_ARG_load <- readRDS("fit4_ARG_load.rds")
fit4_shannon_diversity <- readRDS("fit4_shannon_diversity.rds")

# Combine models into respective lists
fit_list1 <- list(
  fit1_ARG_load = fit1_ARG_load,
  fit1_shannon_diversity = fit1_shannon_diversity
)

fit_list2 <- list(
  fit2_ARG_load = fit2_ARG_load,
  fit2_shannon_diversity = fit2_shannon_diversity
)

fit_list3 <- list(
  fit3_ARG_load = fit3_ARG_load,
  fit3_shannon_diversity = fit3_shannon_diversity
)

fit_list4 <- list(
  fit4_ARG_load = fit4_ARG_load,
  fit4_shannon_diversity = fit4_shannon_diversity
)


```

Then, we define the response variables (ARG_load, shannon_diversity) and income groups (LMIC, HIC) used for stratified statistical modeling.

```{r}
responses <- c("ARG_load", "shannon_diversity")
incomes <- 0:1
set.seed(123123)
```

For each of the 4 model variants, we extract posterior estimates (mean and 95% credible interval) from the brms model fits. This is done separately for:

-   two response variables: ARG load and Shannon diversity

-   two income groups: HIC and LMIC

For each model, we extract coefficient estimates, 95% credible intervals, and compute whether the effect is statistically significant.

```{r, models}
# Results from Model 1: Fixed effects only (Reference)
full_summary1 <- lapply(names(fit_list1), function(r) {  
  lapply(incomes, function(ic) {
    
    # Extract posterior summaries for fixed effects (only coefficients for fixed effects)
    my_summary <- posterior_summary(fit_list1[[r]][[ic+1]]) %>%
      .[grep("^b_", rownames(.)), ] %>%
      as.data.frame() %>%
      rownames_to_column(var = "Feature") %>%
      mutate(
        Feature = gsub("b_", "", Feature),
        Response = gsub("^fit[0-9]+_", "", r),
        income_group = ifelse(ic == 1, "HIC", "LMIC"),
        Significant = ifelse(Q2.5 > 0 | Q97.5 < 0, TRUE, FALSE)  
      ) %>%
      dplyr::select(-Est.Error)
    
    return(my_summary)
  }) %>% do.call(rbind, .)
}) %>% do.call(rbind, .) %>% mutate(model = 1)


# Results from Model 2: + Random intercept for bioproject
full_summary2 <- lapply(names(fit_list2), function(r) {
  lapply(incomes, function(ic) {
    
    # Posterior summaries including adjustment for study-level random effects
    my_summary <- posterior_summary(fit_list2[[r]][[ic+1]]) %>%
      .[grep("^b_", rownames(.)), ] %>%
      as.data.frame() %>%
      rownames_to_column(var = "Feature") %>%
      mutate(
        Feature = gsub("b_", "", Feature),
        Response = gsub("^fit[0-9]+_", "", r),
        income_group = ifelse(ic == 1, "HIC", "LMIC"),
        Significant = ifelse(Q2.5 > 0 | Q97.5 < 0, TRUE, FALSE)
      ) %>%
      dplyr::select(-Est.Error)
    
    return(my_summary)
  }) %>% do.call(rbind, .)
}) %>% do.call(rbind, .) %>% mutate(model = 2)


# Results from Model 3: + log(readcount) as covariate
full_summary3 <- lapply(names(fit_list3), function(r) {
  lapply(incomes, function(ic) {
    
    # Posterior summaries including adjustment for sequencing depth
    my_summary <- posterior_summary(fit_list3[[r]][[ic+1]]) %>%
      .[grep("^b_", rownames(.)), ] %>%
      as.data.frame() %>%
      rownames_to_column(var = "Feature") %>%
      mutate(
        Feature = gsub("b_", "", Feature),
        Response = gsub("^fit[0-9]+_", "", r),
        income_group = ifelse(ic == 1, "HIC", "LMIC"),
        Significant = ifelse(Q2.5 > 0 | Q97.5 < 0, TRUE, FALSE)
      ) %>%
      dplyr::select(-Est.Error)
    
    return(my_summary)
  }) %>% do.call(rbind, .)
}) %>% do.call(rbind, .) %>% mutate(model = 3)


# Results from Model 4: + log(readcount) + (1 | bioproject)
full_summary4 <- lapply(names(fit_list4), function(r) {
  lapply(incomes, function(ic) {
    
    # Posterior summaries including both sequencing depth and study-level random effect
    my_summary <- posterior_summary(fit_list4[[r]][[ic+1]]) %>%
      .[grep("^b_", rownames(.)), ] %>%
      as.data.frame() %>%
      rownames_to_column(var = "Feature") %>%
      mutate(
        Feature = gsub("b_", "", Feature),
        Response = gsub("^fit[0-9]+_", "", r),
        income_group = ifelse(ic == 1, "HIC", "LMIC"),
        Significant = ifelse(Q2.5 > 0 | Q97.5 < 0, TRUE, FALSE)
      ) %>%
      dplyr::select(-Est.Error)
    
    return(my_summary)
  }) %>% do.call(rbind, .)
}) %>% do.call(rbind, .) %>% mutate(model = 4)

```


# Combining results

This section combines the outputs from all four Bayesian regression models into a unified summary table. Each model's results include the estimated effect sizes and confidence intervals for all predictors. The summary table is cleaned, standardized, and formatted for further analysis and plotting.

```{r, combine}
# Combine all model summaries into a single data frame
full_summary <- list(
  full_summary1, 
  full_summary2, 
  full_summary3, 
  full_summary4
) %>% 
  do.call(rbind, .)

# Recode and relabel model names for clarity
full_summary <- full_summary %>%
  mutate(
    model = recode(as.character(model),
                   "1" = "original", 
                   "2" = "+(1|bioproject)", 
                   "3" = "+log(readcount)", 
                   "4" = "+(1|bioproject)+log(readcount)"),
    model = factor(model, levels = c(
      "original", 
      "+(1|bioproject)", 
      "+log(readcount)", 
      "+(1|bioproject)+log(readcount)"))
  )

# Clean and harmonize variable names for better readability
full_summary <- full_summary %>%
  mutate(
    Feature = gsub("continent", "", Feature),
    Feature = gsub("age_category", "", Feature),
    Feature = gsub("Usage_high", "High Antibiotic Use", Feature),
    Feature = gsub("sex_num_Men", "Woman", Feature),
    Feature = gsub("_", " ", Feature),
    Feature = gsub("logreadcount", "log(read count)", Feature),
    Response = gsub("ARG_load", "ARG load", Response),
    Response = gsub("shannon_diversity", "Shannon", Response)
  )

# Select and rename relevant columns
full_summary <- full_summary %>%
  select(
    Predictor = Feature,
    Estimate, Q2.5, Q97.5,
    Response,
    `Income Group` = income_group, 
    model
  )

# Calculate exponentiated estimates and confidence intervals
full_summary <- full_summary %>%
  mutate(
    `exp(Estimate)` = exp(Estimate),
    `exp(Q2.5)` = exp(Q2.5),
    `exp(Q97.5)` = exp(Q97.5)
  )

# Define display order for predictors in plots
full_summary$Predictor <- factor(full_summary$Predictor,
  levels = c(
    "log(read count)", 
    "South America", "Oceania", "North America", "Europe", "Asia",
    "Oldest Adult", "Older Adult", "Young Adult", "Teenager",
    "Children", "Toddler", "Infant",
    "High Antibiotic Use", "Woman", "Intercept"
  )
)

# Rename model column and update label for reference model
full_summary <- full_summary %>%
  rename(Model = model) %>%
  mutate(Model = recode(Model, "original" = "Reference"))
```



# Model Results

In this section, detailed results are presented for each of the four Bayesian regression models introduced earlier. For every model, we provide both a summary table of posterior estimates and a corresponding plot visualizing the effect sizes and 95% credible intervals for each predictor. Results are shown separately for the two outcome variables (ARG load and Shannon diversity) and stratified by income group (HIC and LMIC). A combined comparison plot is included at the end to facilitate visual comparison across models.


## Model 1: Fixed Effects Only

```{r}
# Filter Model 1 results from full_summary
model1_summary <- full_summary %>%
  filter(Model == "Reference") %>%
  mutate(
    lower = (exp(Q2.5) - 1) * 100,
    upper = (exp(Q97.5) - 1) * 100,
    mean = (exp(Estimate) - 1) * 100,
    Significant = Q2.5 > 0 | Q97.5 < 0
  ) %>%
  filter(Predictor != "Intercept")

# Summary table
model1_summary %>%
  dplyr::select(Predictor, Response, `Income Group`, Estimate, Q2.5, Q97.5, Significant) %>%
  knitr::kable(digits = 3, caption = "Posterior summaries for Model 1 (Fixed Effects Only)")

# Plot model 1
p1 <- full_summary %>% 
  filter(Model == levels(full_summary$Model)[1]) %>%
  mutate(lower = (exp(Q2.5) - 1)*100,
         upper = (exp(Q97.5) - 1)*100, 
         mean = (exp(Estimate) - 1)*100) %>%
  filter(Predictor != "Intercept") %>% 
  ggplot() + 
  geom_hline(yintercept = 0, linetype = "dashed") +
  geom_errorbar(aes(x = Predictor, ymin = lower, ymax = upper, color = Response),
                position = position_dodge(width = 0.5), width = 0.4, linewidth = 1.5) +
  geom_point(aes(x = Predictor, y = (exp(Estimate) - 1)*100,
                 color = Response),
             position = position_dodge(width = 0.5),
             size = 2) +
  facet_wrap(~`Income Group`) +
  coord_flip() +
  labs(title = "Model 1: Fixed Effects Only", y = "Effect Size (%)", x = "") +
  scale_color_manual(values = c("#1f77b4", "#ff7f0e")) +
  facet_wrap(~`Income Group`, ncol = 2) + 
  theme_bw(11) + 
  theme(strip.background =element_rect(fill="white"))

p1
```


## Model 2: + (1 | bioproject)

```{r}
# Filter Model 2 results from full_summary
model2_summary <- full_summary %>%
  filter(Model == "+(1|bioproject)") %>%
  mutate(
    lower = (exp(Q2.5) - 1) * 100,
    upper = (exp(Q97.5) - 1) * 100,
    mean = (exp(Estimate) - 1) * 100,
    Significant = Q2.5 > 0 | Q97.5 < 0
  ) %>%
  filter(Predictor != "Intercept")

# Summary table
model2_summary %>%
  dplyr::select(Predictor, Response, `Income Group`, Estimate, Q2.5, Q97.5, Significant) %>%
  knitr::kable(digits = 3, caption = "Posterior summaries for Model 2 (Random Intercept for Bioproject)")

# Plot model 2
p2 <- full_summary %>% 
  filter(Model == levels(full_summary$Model)[2]) %>%
  mutate(lower = (exp(Q2.5) - 1)*100,
         upper = (exp(Q97.5) - 1)*100, 
         mean = (exp(Estimate) - 1)*100) %>%
  filter(Predictor != "Intercept") %>% 
  ggplot() + 
  geom_hline(yintercept = 0, linetype = "dashed") +
  geom_errorbar(aes(x = Predictor, ymin = lower, ymax = upper, color = Response),
                position = position_dodge(width = 0.5), width = 0.4, linewidth = 1.5) +
  geom_point(aes(x = Predictor, y = (exp(Estimate) - 1)*100,
                 color = Response),
             position = position_dodge(width = 0.5),
             size = 2) +
  facet_wrap(~`Income Group`) +
  coord_flip() +
  labs(title = "Model 2: + (1 | bioproject)", y = "Effect Size (%)", x = "") +
  scale_color_manual(values = c("#1f77b4", "#ff7f0e")) +
  facet_wrap(~`Income Group`, ncol = 2) + 
  theme_bw(11) + 
  theme(strip.background =element_rect(fill="white"))

p2
```


## Model 3: + log(readcount)

```{r}
# Filter Model 3 results from full_summary
model3_summary <- full_summary %>%
  filter(Model == "+log(readcount)") %>%
  mutate(
    lower = (exp(Q2.5) - 1) * 100,
    upper = (exp(Q97.5) - 1) * 100,
    mean = (exp(Estimate) - 1) * 100,
    Significant = Q2.5 > 0 | Q97.5 < 0
  ) %>%
  filter(Predictor != "Intercept")

# Summary table
model3_summary %>%
  dplyr::select(Predictor, Response, `Income Group`, Estimate, Q2.5, Q97.5, Significant) %>%
  knitr::kable(digits = 3, caption = "Posterior summaries for Model 3 (+ log(readcount))")

# Plot model 3
p3 <- full_summary %>% 
  filter(Model == levels(full_summary$Model)[3]) %>%
  mutate(lower = (exp(Q2.5) - 1)*100,
         upper = (exp(Q97.5) - 1)*100, 
         mean = (exp(Estimate) - 1)*100) %>%
  filter(Predictor != "Intercept") %>% 
  ggplot() + 
  geom_hline(yintercept = 0, linetype = "dashed") +
  geom_errorbar(aes(x = Predictor, ymin = lower, ymax = upper, color = Response),
                position = position_dodge(width = 0.5), width = 0.4, linewidth = 1.5) +
  geom_point(aes(x = Predictor, y = (exp(Estimate) - 1)*100,
                 color = Response),
             position = position_dodge(width = 0.5),
             size = 2) +
  facet_wrap(~`Income Group`) +
  coord_flip() +
  labs(title = "Model 3: + log(readcount)", y = "Effect Size (%)", x = "") +
  scale_color_manual(values = c("#1f77b4", "#ff7f0e")) +
  facet_wrap(~`Income Group`, ncol = 2) + 
  theme_bw(11) + 
  theme(strip.background =element_rect(fill="white"))

p3
```


## Model 4: + (1 | bioproject) + log(readcount)

```{r}
# Filter Model 4 results from full_summary
model4_summary <- full_summary %>%
  filter(Model == "+(1|bioproject)+log(readcount)") %>%
  mutate(
    lower = (exp(Q2.5) - 1) * 100,
    upper = (exp(Q97.5) - 1) * 100,
    mean = (exp(Estimate) - 1) * 100,
    Significant = Q2.5 > 0 | Q97.5 < 0
  ) %>%
  filter(Predictor != "Intercept")

# Summary table
model4_summary %>%
  dplyr::select(Predictor, Response, `Income Group`, Estimate, Q2.5, Q97.5, Significant) %>%
  knitr::kable(digits = 3, caption = "Posterior summaries for Model 4 (+ log(readcount) + (1 | bioproject))")

# Plot model 4
p4 <- full_summary %>% 
  filter(Model == levels(full_summary$Model)[4]) %>%
  mutate(lower = (exp(Q2.5) - 1)*100,
         upper = (exp(Q97.5) - 1)*100, 
         mean = (exp(Estimate) - 1)*100) %>%
  filter(Predictor != "Intercept") %>% 
  ggplot() + 
  geom_hline(yintercept = 0, linetype = "dashed") +
  geom_errorbar(aes(x = Predictor, ymin = lower, ymax = upper, color = Response),
                position = position_dodge(width = 0.5), width = 0.4, linewidth = 1.5) +
  geom_point(aes(x = Predictor, y = (exp(Estimate) - 1)*100,
                 color = Response),
             position = position_dodge(width = 0.5),
             size = 2) +
  facet_wrap(~`Income Group`) +
  coord_flip() +
  labs( title = "Model 4: + (1 | bioproject) + log(readcount)", y = "Effect Size (%)", x = "") +
  scale_color_manual(values = c("#1f77b4", "#ff7f0e")) +
  facet_wrap(~`Income Group`, ncol = 2) + 
  theme_bw(11) + 
  theme(strip.background =element_rect(fill="white"))

p4

```


## Comparison Across Models

```{r, combineplot, fig.width=14, fig.height=10}

# Create comparison plot across all four models
comparison_p <- full_summary %>% 
  filter(Predictor != "Intercept") %>%
  mutate(
    lower = (exp(Q2.5) - 1) * 100,
    upper = (exp(Q97.5) - 1) * 100,
    mean = (exp(Estimate) - 1) * 100
  ) %>%
  ggplot() + 
  geom_hline(yintercept = 0, linetype = "dashed") +
  geom_errorbar(
    aes(x = Predictor, ymin = lower, ymax = upper, color = Response),
    position = position_dodge(width = 0.6),
    width = 1,
    linewidth = 1
  ) +
  geom_point(
    aes(x = Predictor, y = mean, color = Response),
    position = position_dodge(width = 0.5),
    size = 1
  ) +
  coord_flip() +
  labs(y = "Effect Size (%)", x = "", title = "Comparison of Effect Estimates Across Models"
  ) +
  facet_wrap(Model ~ `Income Group`, ncol = 2) +
  scale_color_manual(values = c("#1f77b4", "#ff7f0e")) +
  theme_bw(10) +
  theme(
    strip.background = element_rect(fill = "white"),
    axis.text.y = element_text(size = 8)
  )

print(comparison_p)

```



