---
title: "Figure5 Data Processing and Visualization"
format: html
editor: visual
---

# Introduction

This document contains the analysis and visualization steps for reproducing Figure 5. Before running this document, please ensure that the following R scripts are available in your working directory:

-   `data.R` – for data preparation

-   `funcs.R` – for utility functions

-   `model.R` – for precomputing the statistical models used in this analysis

Each of these scripts is sourced within this document using the `source("filename.R")` command. This means that as long as the files are located in the working directory (or the correct relative path is provided), they will be automatically executed to load the required data and functions.

The dataset (`tse_AMRdemo.rds`) used in this analysis, as well as all the above scripts, can be found in the [GitHub](https://github.com/microbiome/data/blob/main/Salehi2025). This separation ensures that model fitting, which is computationally intensive, does not need to be rerun every time the report is generated.

Let's load all the necessary libraries.

```{r setup, include=FALSE}
library(scater)
library(ggpubr)
library(rstatix)
library(viridis)
library(ggsignif)
library(Matrix)
library(RColorBrewer)
library(caret)
library(randomForest)
library(xgboost)
library(brms)
library(glmnet)
library(tidyverse)
library(vegan)
library(TreeSummarizedExperiment)
library(dplyr)
```

# Data processing

All preprocessing steps including filtering samples, extracting metadata, calculating resistance class abundances, and computing diversity metrics are implemented in a separate R script (`data.R`). Please ensure that this script is located in your working directory or adjust the path accordingly.

The script can be executed using the following command, which will load all necessary data and variables for this report:

```{r, data}
source("data.R")
```

# Utility functions

All helper functions such as formatting numbers and assigning significance indicators are implemented in a separate R script (`funcs.R`). Please ensure that this script is available in your working directory and source it before generating the report to make all required functions accessible:

```{r, funcs}
source("funcs.R")
```

# Modeling

This section summarizes the results from four Bayesian regression model variants. Each model was fitted separately for two outcomes ARG load and Shannon diversity and stratified by income group: HIC (High-Income Countries) and LMIC (Low- and Middle-Income Countries).

### Model Variants:

1.  **Model 1 (Reference):** Fixed effects only; no adjustment for bioproject or sequencing depth.

2.  **Model 2:** Adds a random intercept for `bioproject` to account for study-level variation.

3.  **Model 3:** Adds log-transformed sequencing depth `log(readcount)` as a covariate.

4.  **Model 4:** Includes both a random intercept for `bioproject` and `log(readcount)` as a covariate.

Model fitting is computationally intensive and has been performed in a separate R script (`model.R`). Please ensure that this script is available in your working directory and source it before proceeding with the model summary and visualization steps:

```{r, model}
# This step is slow and only needs to be run once.
# It fits the models and automatically saves them as .rds files (fit1.rds, fit2.rds, etc.).
# After the first run, you can skip this and load the models directly.
source("model.R")

```

The resulting model objects are saved as `.rds` files (e.g., `fit1.rds`, `fit2.rds`, etc.). These files are then loaded into this document to allow downstream summarization and visualization without re-running the computationally intensive model fitting:

```{r, load_models}
# Load models
fit_list1 <- readRDS("fit1.rds")
fit_list2 <- readRDS("fit2.rds")
fit_list3 <- readRDS("fit3.rds")
fit_list4 <- readRDS("fit4.rds")
```

Then, we define the response variables (ARG_load, shannon_diversity) and income groups (LMIC, HIC) used for stratified statistical modeling.

```{r}
responses <- c("ARG_load", "shannon_diversity")
incomes <- 0:1
set.seed(123123)
```

For each of the 4 model variants, we extract posterior estimates (mean and 95% credible interval) from the brms model fits. This is done separately for:

-   two response variables: ARG load and Shannon diversity

-   two income groups: HIC and LMIC

For each model, we extract coefficient estimates, 95% credible intervals, and compute whether the effect is statistically significant.

```{r, models}

# Results from Model 1: Fixed effects only (Reference)
full_summary1 <- lapply(responses, function(r) {
  lapply(incomes, function(ic) {
    
    # Extract posterior summaries for fixed effects
    my_summary <- posterior_summary(fit_list1[[r]][[ic+1]]) %>%
      .[grep("^b_", rownames(.)), ] %>%
      as.data.frame() %>%
      rownames_to_column(var = "Feature") %>%
      mutate(
        Feature = gsub("b_", "", Feature),
        Response = r,
        income_group = ifelse(ic == 1, "HIC", "LMIC"),
        Significant = ifelse(Q2.5 > 0 | Q97.5 < 0, TRUE, FALSE)
      ) %>%
      dplyr::select(-Est.Error)
    
    return(my_summary)
  }) %>% do.call(rbind, .)
}) %>% do.call(rbind, .) %>% mutate(model = 1)


# Results from Model 2: + Random intercept for bioproject
full_summary2 <- lapply(responses, function(r) {
  lapply(incomes, function(ic) {
    
    # Posterior summaries including adjustment for study-level random effects
    my_summary <- posterior_summary(fit_list2[[r]][[ic+1]]) %>%
      .[grep("^b_", rownames(.)), ] %>%
      as.data.frame() %>%
      rownames_to_column(var = "Feature") %>%
      mutate(
        Feature = gsub("b_", "", Feature),
        Response = r,
        income_group = ifelse(ic == 1, "HIC", "LMIC"),
        Significant = ifelse(Q2.5 > 0 | Q97.5 < 0, TRUE, FALSE)
      ) %>%
      dplyr::select(-Est.Error)
    
    return(my_summary)
  }) %>% do.call(rbind, .)
}) %>% do.call(rbind, .) %>% mutate(model = 2)


# Results from Model 3: + log(readcount) as covariate
full_summary3 <- lapply(responses, function(r) {
  lapply(incomes, function(ic) {
    
    # Posterior summaries including adjustment for sequencing depth
    my_summary <- posterior_summary(fit_list3[[r]][[ic+1]]) %>%
      .[grep("^b_", rownames(.)), ] %>%
      as.data.frame() %>%
      rownames_to_column(var = "Feature") %>%
      mutate(
        Feature = gsub("b_", "", Feature),
        Response = r,
        income_group = ifelse(ic == 1, "HIC", "LMIC"),
        Significant = ifelse(Q2.5 > 0 | Q97.5 < 0, TRUE, FALSE)
      ) %>%
      dplyr::select(-Est.Error)
    
    return(my_summary)
  }) %>% do.call(rbind, .)
}) %>% do.call(rbind, .) %>% mutate(model = 3)


# Results from Model 4: + log(readcount) + (1 | bioproject)
full_summary4 <- lapply(responses, function(r) {
  lapply(incomes, function(ic) {
    
    # Posterior summaries including both sequencing depth and study-level random effect
    my_summary <- posterior_summary(fit_list4[[r]][[ic+1]]) %>%
      .[grep("^b_", rownames(.)), ] %>%
      as.data.frame() %>%
      rownames_to_column(var = "Feature") %>%
      mutate(
        Feature = gsub("b_", "", Feature),
        Response = r,
        income_group = ifelse(ic == 1, "HIC", "LMIC"),
        Significant = ifelse(Q2.5 > 0 | Q97.5 < 0, TRUE, FALSE)
      ) %>%
      dplyr::select(-Est.Error)
    
    return(my_summary)
  }) %>% do.call(rbind, .)
}) %>% do.call(rbind, .) %>% mutate(model = 4)

```

# Combining results

This section combines the outputs from all four Bayesian regression models into a unified summary table. Each model's results include the estimated effect sizes and confidence intervals for all predictors. The summary table is cleaned, standardized, and formatted for further analysis and plotting.

```{r, combine}
# Combine all model summaries into a single data frame
full_summary <- list(
  full_summary1, 
  full_summary2, 
  full_summary3, 
  full_summary4
) %>% 
  do.call(rbind, .)

# Recode and relabel model names for clarity
full_summary <- full_summary %>%
  mutate(
    model = recode(as.character(model),
                   "1" = "original", 
                   "2" = "+(1|bioproject)", 
                   "3" = "+log(readcount)", 
                   "4" = "+(1|bioproject)+log(readcount)"),
    model = factor(model, levels = c(
      "original", 
      "+(1|bioproject)", 
      "+log(readcount)", 
      "+(1|bioproject)+log(readcount)"))
  )

# Clean and harmonize variable names for better readability
full_summary <- full_summary %>%
  mutate(
    Feature = gsub("continent", "", Feature),
    Feature = gsub("age_category", "", Feature),
    Feature = gsub("Usage_high", "High Antibiotic Use", Feature),
    Feature = gsub("sex_num_Men", "Woman", Feature),
    Feature = gsub("_", " ", Feature),
    Feature = gsub("logreadcount", "log(read count)", Feature),
    Response = gsub("ARG_load", "ARG load", Response),
    Response = gsub("shannon_diversity", "Shannon", Response)
  )

# Select and rename relevant columns
full_summary <- full_summary %>%
  select(
    Predictor = Feature,
    Estimate, Q2.5, Q97.5,
    Response,
    `Income Group` = income_group, 
    model
  )

# Calculate exponentiated estimates and confidence intervals
full_summary <- full_summary %>%
  mutate(
    `exp(Estimate)` = exp(Estimate),
    `exp(Q2.5)` = exp(Q2.5),
    `exp(Q97.5)` = exp(Q97.5)
  )

# Define display order for predictors in plots
full_summary$Predictor <- factor(full_summary$Predictor,
  levels = c(
    "log(read count)", 
    "South America", "Oceania", "North America", "Europe", "Asia",
    "Oldest Adult", "Older Adult", "Young Adult", "Teenager",
    "Children", "Toddler", "Infant",
    "High Antibiotic Use", "Woman", "Intercept"
  )
)

# Rename model column and update label for reference model
full_summary <- full_summary %>%
  rename(Model = model) %>%
  mutate(Model = recode(Model, "original" = "Reference"))
```

# Plotting

This section generates Figure 5, which visualizes the effect sizes (with 95% credible intervals) of selected predictors on two outcome variables (Shannon diversity and ARG load (log-transformed)).

```{r}
# Figure5
p <- full_summary %>% 
  filter(Model == levels(full_summary$Model)[1]) %>%
  mutate(lower = (exp(Q2.5) - 1)*100,
         upper = (exp(Q97.5) - 1)*100, 
         mean = (exp(Estimate) - 1)*100) %>%
  filter(Predictor != "Intercept") %>% 
  ggplot() + 
  geom_hline(yintercept = 0, linetype = "dashed") +
  geom_errorbar(aes(x = Predictor, ymin = lower, ymax = upper, color = Response),
                position = position_dodge(width = 0.5), width = 0.4, linewidth = 1.5) +
  geom_point(aes(x = Predictor, y = (exp(Estimate) - 1)*100,
                 color = Response),
             position = position_dodge(width = 0.5),
             # shape = 1,
             size = 2) +
  facet_wrap(~`Income Group`) +
  coord_flip() +
  labs(y = "Effect Size (%)", x = "") +
  scale_color_manual(values = c("#1f77b4", "#ff7f0e")) +
  facet_wrap(~`Income Group`, ncol = 2) + 
  theme_bw(25) + 
  theme(strip.background =element_rect(fill="white"))

p
```
